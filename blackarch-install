#!/bin/bash
################################################################################
#                                                                              #
# blackarchinstall - Blackarch Install                                         #
#                                                                              #
# FILE                                                                         #
# blackarchinstall.sh                                                          #
#                                                                              #
# DATE                                                                         #
# 2013-12-16                                                                   #
#                                                                              #
# DESCRIPTION                                                                  #
# Script for easy install                                                      #
#                                                                              #
# AUTHOR                                                                       #
# nrz@nullsecurity.net                                                         #
#                                                                              #
################################################################################

# SECURITY VAR - this version can rm -rf /* your hard drive
SEC_ENABLE="true"

# HD beta var
HD="sda"

# blackarchinstall version
VERSION="blackarchinstall v0.2"

# true / false
FALSE="0"
TRUE="1"

# return codes
SUCCESS="1337"
FAILURE="31337"

# verbose mode - default: quiet
VERBOSE="/dev/null"

# colors
WHITE="$(tput bold ; tput setaf 7)"
GREEN="$(tput setaf 2)"
RED="$(tput bold; tput setaf 1)"
YELLOW="$(tput bold ; tput setaf 3)"
NC="$(tput sgr0)" # No Color

# root variable
ROOT="/mnt/blackarch"

# BA REPO
BLACKARCH_REPO_URL='http://www.blackarch.org/blackarch/$repo/os/$arch'

wprintf() {
    fmt=$1
    shift
    printf "%s${fmt}%s\n" "${WHITE}" "$@" "${NC}"

    return "${SUCCESS}"
}

# print warning
warn()
{
    printf "%s[!] WARNING: %s%s\n" "${RED}" "${*}" "${NC}"

    return "${SUCCESS}"
}

# print error and exit
err()
{
    printf "%s[-] ERROR: %s%s\n" "${RED}" "${*}" "${NC}"

    return "${SUCCESS}"
}

# print error and exit
cri()
{
    printf "%s[-] CRITICAL: %s%s\n" "${RED}" "${*}" "${NC}"
    
    exit "${FAILURE}"
}


# usage and help
usage()
{
cat <<EOF
Usage: $0 <arg> | <misc>
OPTIONS:
    -i: install
MISC:
    -V: print version and exit
    -H: print help and exit
EOF
    return "${SUCCESS}"
}

# leet banner, very important
banner()
{
    printf "%s--==[ BlackArch Install ]==--%s\n" "${YELLOW}" "${NC}"

    return "${SUCCESS}"
}

check_env()
{
    if [ -f /var/lib/pacman/db.lck ]; then
        cri "Pacman locked - rm /var/lib/pacman/db.lck"
    fi
}

# check argument count
check_argc()
{
    return "${SUCCESS}"
}

# check if required arguments were selected
check_args()
{
    return "${SUCCESS}"
}


update_system()
{
    if ! grep -q "blackarch" /etc/pacman.conf; then
        wprintf "[+] Adding BlackArch Official Repo"
        printf '[blackarch]\nServer = %s\n' "${BLACKARCH_REPO_URL}" >> /etc/pacman.conf
    fi

    if [ "$(uname -m)" == "x86_64" ]; then
        wprintf "[+] Enabling multilib"
        printf "[multilib]\nInclude = /etc/pacman.d/mirrorlist\n" >> /etc/pacman.conf
    fi

    #fix this
    #sed -i '/[multilib]/{ s/^#//; n; s/^#//; }' /etc/pacman.conf

    # key problem - will be solved later on
    pacman -Syyu --noconfirm
    pacman-key -r 4345771566D76038C7FEB43863EC0ADBEA87E4E3
    pacman-key --lsign-key 4345771566D76038C7FEB43863EC0ADBEA87E4E3
    pacman -Syy
    
    return "${SUCCESS}"
}

format_filesystem()
{
    # TODO: add swap 

    printf "%s" "${WHITE}"
    
    printf "[+] Type the device for install [/dev/sda]: "; read a

    if [ "${a}" == "" ]; then
        HD="/dev/sda"
    else
        HD="${a}"
    fi

    # check if Partition Table already set
    #parted "/dev/${HD}" print | grep -q "Partition Table"
    parted -s "/dev/${HD}" mklabel msdos

    # boot partition
    printf "[+] Select partition number for /boot partition [/dev/%s1]: " "${HD}"; read a;
    if [ "${a}" == "" ]; then
        boot_part="/dev/${HD}1"
    else
        # parse user input errors
        boot_part=${a}
    fi

    printf "[+] Select partition size for /boot [100MB]: "; read a
    if [ "${a}" == "" ]; then
        boot_size="100MB"
    else
        boot_size=${a}
    fi
    
    parted -a optimal "${boot_part}" mkpart primary 0% "${boot_size}"
    
    # partition bootable
    parted "${boot_part}" set 1 boot on
    
    # root partition
    printf "[+] Select partition number for / partition [/dev/%s2]: " "${HD}"; read a
    if [ "${a}" == "" ]; then
        root_part="/dev/${HD}"
    else
        # parse user input errors
        root_part=${a}
    fi
    printf "[+] Select partition size for / [100% = ALL LEFT]: "; read a
    if [ "${a}" == "" ]; then
        root_size="100%"
    else
        root_size=${a}
    fi
    parted -a optimal "${root_part}" mkpart primary 100MB "${root_size}"

    # about to formating
    printf "[+] About to formating /boot = %s / = %s [y/N]: " "${boot_part}" "${root_part}"
    read a
    if [ "${a}" == "y" ]; then 
        mkfs.ext2 -L boot "${boot_part}"
        mkfs.ext4 -L root "${root_part}"

        printf "[+] Created boot partition: %s - ext2\n" "${boot_part}"
        printf "[+] Created root partition: %s - ext4\n" "${root_part}"
    else
        cri "Format cancelled"
    fi

    printf "%s" "${NC}"

    return "${SUCCESS}"
}

mount_filesystem()
{
    #TODO: change boot device for user required
    
    mkdir -p "${ROOT}"
    mount -t ext4 "/dev/${HD}2" "${ROOT}" 
    mkdir -p "${ROOT}/boot"
    mount -t ext2 "/dev/${HD}1" "${ROOT}/boot"
      
    return "${SUCCESS}"
}

install_packages()
{
    pacstrap -c "${ROOT}" base 
    pacstrap -c "${ROOT}" blackarch

    return "${SUCCESS}"
}

install_grub()
{
    # patching grub2 syntax error
    echo "GRUB_DISABLE_SUBMENU=y" >> "${ROOT}"/etc/default/grub

    # path depends on git clone or blackarch live source
    if [ -f grub-install.sh ]; then
	    grub_file="grub-install.sh"
    else
	    grub_file="/usr/share/blackarch-install-scripts/grub-install.sh"
    fi 

    cp "${grub_file}" "${ROOT}/bin"
    arch-chroot "${ROOT}" "${grub_file}"
    
    # cleaning up
    rm -rf "${ROOT}/bin/grub-install.sh"

    return "${SUCCESS}"
}

install()
{
    wprintf "[+] Updating system..."
    update_system
    
    wprintf "[+] Partitioning ${HD}..."
    format_filesystem

    wprintf "[+] Mounting filesystem..."
    mount_filesystem

    wprintf "[+] Installing BlackArch packages..."
    install_packages
    
    wprintf "[+] Generating fstab..."
    genfstab -p "${ROOT}" >> "${ROOT}/etc/fstab"

    wprintf "[+] Installing grub..."
    install_grub

    return "${SUCCESS}"
}

# parse command line options
get_opts()
{
    while getopts ivVH flags
    do
        case "${flags}" in
            i)
                #optarg=${OPTARG}
                opt="install"
                ;;
            v)
                VERBOSE="/dev/stdout"
                ;;
            V)
                printf "%s\n" "${VERSION}"
                exit "${SUCCESS}"
                ;;
            H)
                usage
                ;;
            *)
                err "WTF?! mount /dev/brain"
                ;;
        esac
    done

    return "${SUCCESS}"
}


# controller and program flow
main()
{
    banner
    check_argc ${*}
    get_opts ${*}
    check_args ${*}
    check_env

    # commented arg opt 
    #if [ "${opt}" == "install" ]; then
        if [[ "${SEC_ENABLE}" == "false" ]]; then
            install
        else
            cri "SEC_ENABLE var active - vim /usr/share/blackarch-install-scripts/blackarch-install"
        fi
    #fi
    return "${SUCCESS}"
}


# program start
main ${*}

# EOF
